<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Board">

    <!--주키{id}로 게시물 구분-->

    <!--글작성-->
    <insert id="save" parameterType="board" useGeneratedKeys="true" keyProperty="id">
        insert into board_table(boardTitle, boardWriter, boardPass, boardContents, fileAttached)
        values(#{boardTitle}, #{boardWriter}, #{boardPass}, #{boardContents}, #{fileAttached})
    </insert>

    <!--글작성-->
    <select id="findAll" resultType="board">
        select id, boardTitle, boardWriter, boardHits, date_format(createdAt, "%Y-%m-%d") as createdAt
        from board_table order by id desc
    </select>

    <!--id로 들어오면 조회수 증가-->
    <update id="updateHits" parameterType="Long">
        update board_table set boardHits=boardHits+1 where id=#{id}
    </update>

    <!--보드 변수를 model로 보여줄수 있게 셀렉트-->
    <select id="findById" parameterType="Long" resultType="board">
        select id, boardTitle, boardWriter, boardPass, boardContents, boardHits,
        date_format(createdAt, "%Y-%m-%d %H:%i:%s") as createdAt, fileAttached
        from board_table where id=#{id}
    </select>

    <!--글 수정-->
    <update id="update">
        update board_table set boardTitle=#{boardTitle}, boardContents=#{boardContents} where id=#{id}
    </update>

    <!--글 삭제-->
    <delete id="delete" parameterType="Long">
        delete from board_table where id=#{id}
    </delete>

    <!--DTO 변수에 파일 추가-->
    <insert id="saveFile" parameterType="boardFile">
        insert into board_file_table(originalFileName, storedFileName, boardId)
        values (#{originalFileName}, #{storedFileName}, #{boardId})
    </insert>

    <!--업로드 된 파일 선택-->
    <select id="findFile" parameterType="Long" resultType="boardFile">
        select * from board_file_table where boardId = #{id}
    </select>

    <!--id 대신할 번호, 로우넘버 (미구현)-->
    <select id="getBoardList" resultType="Board">
        SELECT
            ROW_NUMBER() OVER (ORDER BY createdAt DESC) AS displayOrder,  -- 번호 매기기
            id,
            boardWriter,
            boardPass,
            boardTitle,
            boardContents,
            boardHits,
            createdAt,
            fileAttached
        FROM board_table
    </select>

    <!-- 댓글 추가 -->
    <insert id="insertComment" parameterType="map" useGeneratedKeys="true" keyProperty="commentId">
        INSERT INTO comment (postId, commentContent, comment_writer, comment_password)
        VALUES (#{postId}, #{commentContent}, #{comment_writer}, #{comment_password})
    </insert>

    <!-- 특정 게시글의 댓글 목록 조회 -->
    <select id="getCommentsByPostId" resultType="map">
        SELECT commentId, postId, commentContent, commentCreatedat, comment_writer, comment_password
        FROM comment
        WHERE postId = #{postId}
        ORDER BY commentCreatedat DESC
    </select>

    <!-- 댓글 삭제 -->
    <delete id="deleteCommentById" parameterType="map">
        DELETE FROM comment WHERE commentId = #{commentId} AND comment_password = #{comment_password}
    </delete>


    <!-- 댓글 수정-->
    <update id="updateComment" parameterType="map">
        UPDATE comment
        SET commentContent = #{commentContent}
        WHERE commentId = #{commentId} AND comment_password = #{comment_password}
    </update>

    <!-- 상위 5개 게시글 가져오기 -->
    <select id="findTop5" resultType="board">
        SELECT id, boardTitle, boardWriter, boardHits, createdAt
        FROM board_table
        ORDER BY createdAt DESC
        LIMIT 5
    </select>

    <!-- 페이징 처리-->
    <select id="findAllWithPaging" resultType="board">
        SELECT id, boardTitle, boardWriter, boardHits,
               DATE_FORMAT(createdAt, "%Y-%m-%d") as createdAt
        FROM board_table
        ORDER BY id DESC
            LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 전체 테이블 크기 확인-->
    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*) FROM board_table
    </select>


</mapper>


